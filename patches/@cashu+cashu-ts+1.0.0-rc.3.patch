diff --git a/node_modules/@cashu/cashu-ts/package.json b/node_modules/@cashu/cashu-ts/package.json
index f2809bd..48176f1 100644
--- a/node_modules/@cashu/cashu-ts/package.json
+++ b/node_modules/@cashu/cashu-ts/package.json
@@ -2,8 +2,7 @@
 	"name": "@cashu/cashu-ts",
 	"version": "1.0.0-rc.3",
 	"description": "cashu library for communicating with a cashu mint",
-	"main": "dist/lib/es5/index.js",
-	"module": "dist/lib/es6/index.js",
+	"main": "src/index.ts",
 	"repository": {
 		"type": "git",
 		"url": "git+https://github.com/cashubtc/cashu-ts"
diff --git a/node_modules/@cashu/cashu-ts/src/CashuMint.ts b/node_modules/@cashu/cashu-ts/src/CashuMint.ts
index 1491934..7a88aea 100644
--- a/node_modules/@cashu/cashu-ts/src/CashuMint.ts
+++ b/node_modules/@cashu/cashu-ts/src/CashuMint.ts
@@ -17,9 +17,9 @@ import type {
 	PostRestorePayload,
 	MeltQuotePayload,
 	MeltQuoteResponse
-} from './model/types/index.js';
-import request from './request.js';
-import { isObj, joinUrls } from './utils.js';
+} from './model/types/index';
+import request from './request';
+import { isObj, joinUrls } from './utils';
 
 /**
  * Class represents Cashu Mint API. This class contains Lower level functions that are implemented by CashuWallet.
diff --git a/node_modules/@cashu/cashu-ts/src/CashuWallet.ts b/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
index 6d3a0b4..c30dbf6 100644
--- a/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
+++ b/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
@@ -1,7 +1,7 @@
 import { bytesToHex, randomBytes } from '@noble/hashes/utils';
-import { CashuMint } from './CashuMint.js';
-import * as dhke from './DHKE.js';
-import { BlindedMessage } from './model/BlindedMessage.js';
+import { CashuMint } from './CashuMint';
+import * as dhke from './DHKE';
+import { BlindedMessage } from './model/BlindedMessage';
 import {
 	type AmountPreference,
 	type BlindedMessageData,
@@ -113,6 +113,7 @@ class CashuWallet {
 		}
 	): Promise<ReceiveResponse> {
 		let decodedToken: Array<TokenEntry>;
+		let errors: string[] = []
 		if (typeof token === 'string') {
 			decodedToken = cleanToken(getDecodedToken(token)).token;
 		} else {
@@ -125,25 +126,26 @@ class CashuWallet {
 				continue;
 			}
 			try {
-				const { proofs, proofsWithError } = await this.receiveTokenEntry(tokenEntry, {
+				const { proofs, proofsWithError, error } = await this.receiveTokenEntry(tokenEntry, {
 					preference: options?.preference,
 					counter: options?.counter,
 					pubkey: options?.pubkey,
 					privkey: options?.privkey
 				});
+				if(error) {errors.push(error);}
 				if (proofsWithError?.length) {
 					tokenEntriesWithError.push(tokenEntry);
 					continue;
 				}
 				tokenEntries.push({ mint: tokenEntry.mint, proofs: [...proofs] });
-			} catch (error) {
-				console.error(error);
-				tokenEntriesWithError.push(tokenEntry);
+			} catch (error: any) {
+				errors.push(error)
 			}
 		}
 		return {
 			token: { token: tokenEntries },
-			tokensWithErrors: tokenEntriesWithError.length ? { token: tokenEntriesWithError } : undefined
+			tokensWithErrors: tokenEntriesWithError.length ? { token: tokenEntriesWithError } : undefined,
+			errors
 		};
 	}
 
@@ -167,6 +169,7 @@ class CashuWallet {
 	): Promise<ReceiveTokenEntryResponse> {
 		const proofsWithError: Array<Proof> = [];
 		const proofs: Array<Proof> = [];
+		let err: string | undefined = undefined;
 		try {
 			const amount = tokenEntry.proofs.reduce((total, curr) => total + curr.amount, 0);
 			let preference = options?.preference;
@@ -192,12 +195,13 @@ class CashuWallet {
 			);
 			proofs.push(...newProofs);
 		} catch (error) {
-			console.error(error);
+			err = String(error);
 			proofsWithError.push(...tokenEntry.proofs);
 		}
 		return {
 			proofs,
-			proofsWithError: proofsWithError.length ? proofsWithError : undefined
+			proofsWithError: proofsWithError.length ? proofsWithError : undefined,
+			error: err
 		};
 	}
 
@@ -317,7 +321,7 @@ class CashuWallet {
 	/**
 	 * Initialize the wallet with the mints public keys
 	 */
-	private async getKeys(keysetId?: string, unit?: string): Promise<MintKeys> {
+	async getKeys(keysetId?: string, unit?: string): Promise<MintKeys> {
 		if (!this._keys || this._keys.id !== keysetId) {
 			const allKeys = await this.mint.getKeys(keysetId);
 			let keys;
@@ -564,7 +568,7 @@ class CashuWallet {
 	 * @param proofs (only the 'Y' field is required)
 	 * @returns
 	 */
-	async checkProofsSpent<T extends { secret: string }>(proofs: Array<T>): Promise<Array<T>> {
+	async checkProofsSpent<T extends { secret: string }>(proofs: Array<T>): Promise<{spent: Array<T>, pending: Array<T>}> {
 		const enc = new TextEncoder();
 		const Ys = proofs.map((p) => dhke.hashToCurve(enc.encode(p.secret)).toHex(true));
 		const payload = {
@@ -573,10 +577,17 @@ class CashuWallet {
 		};
 		const { states } = await this.mint.check(payload);
 
-		return proofs.filter((_, i) => {
+		const spent = proofs.filter((_, i) => {
 			const state = states.find((state) => state.Y === Ys[i]);
 			return state && state.state === CheckStateEnum.SPENT;
 		});
+
+		const pending = proofs.filter((_, i) => {
+			const state = states.find((state) => state.Y === Ys[i]);
+			return state && state.state === CheckStateEnum.PENDING;
+		});
+
+		return {spent, pending}
 	}
 	private splitReceive(
 		amount: number,
diff --git a/node_modules/@cashu/cashu-ts/src/DHKE.ts b/node_modules/@cashu/cashu-ts/src/DHKE.ts
index da1dfe6..99f60a2 100644
--- a/node_modules/@cashu/cashu-ts/src/DHKE.ts
+++ b/node_modules/@cashu/cashu-ts/src/DHKE.ts
@@ -1,7 +1,7 @@
 import { ProjPointType } from '@noble/curves/abstract/weierstrass';
 import { secp256k1 } from '@noble/curves/secp256k1';
-import { MintKeys, Proof, SerializedBlindedSignature } from './model/types/index.js';
-import { bytesToNumber } from './utils.js';
+import { MintKeys, Proof, SerializedBlindedSignature } from './model/types/index';
+import { bytesToNumber } from './utils';
 import { sha256 } from '@noble/hashes/sha256';
 import { bytesToHex, hexToBytes } from '@noble/curves/abstract/utils';
 import { Buffer } from 'buffer/';
diff --git a/node_modules/@cashu/cashu-ts/src/index.ts b/node_modules/@cashu/cashu-ts/src/index.ts
index f1c49f0..a8147a2 100644
--- a/node_modules/@cashu/cashu-ts/src/index.ts
+++ b/node_modules/@cashu/cashu-ts/src/index.ts
@@ -1,10 +1,10 @@
-import { CashuMint } from './CashuMint.js';
-import { CashuWallet } from './CashuWallet.js';
-import { setGlobalRequestOptions } from './request.js';
-import { generateNewMnemonic, deriveSeedFromMnemonic } from './secrets.js';
-import { getEncodedToken, getDecodedToken, deriveKeysetId } from './utils.js';
+import { CashuMint } from './CashuMint';
+import { CashuWallet } from './CashuWallet';
+import { setGlobalRequestOptions } from './request';
+import { generateNewMnemonic, deriveSeedFromMnemonic } from './secrets';
+import { getEncodedToken, getDecodedToken, deriveKeysetId } from './utils';
 
-export * from './model/types/index.js';
+export * from './model/types/index';
 
 export {
 	CashuMint,
diff --git a/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts b/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts
index 9bd02f3..fe7e70b 100644
--- a/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/BlindedMessage.ts
@@ -1,4 +1,4 @@
-import { SerializedBlindedMessage } from './types/index.js';
+import { SerializedBlindedMessage } from './types/index';
 import { ProjPointType } from '@noble/curves/abstract/weierstrass';
 
 class BlindedMessage {
diff --git a/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts b/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts
index e998f32..16c4488 100644
--- a/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/BlindedSignature.ts
@@ -1,5 +1,5 @@
 import { ProjPointType } from '@noble/curves/abstract/weierstrass';
-import { SerializedBlindedSignature } from './types/index.js';
+import { SerializedBlindedSignature } from './types/index';
 
 class BlindedSignature {
 	id: string;
diff --git a/node_modules/@cashu/cashu-ts/src/model/Split.ts b/node_modules/@cashu/cashu-ts/src/model/Split.ts
index dab9010..ea21a04 100644
--- a/node_modules/@cashu/cashu-ts/src/model/Split.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/Split.ts
@@ -1,5 +1,5 @@
-import { BlindedMessage } from './BlindedMessage.js';
-import { Proof } from './types/index.js';
+import { BlindedMessage } from './BlindedMessage';
+import { Proof } from './types/index';
 
 class Split {
 	proofs: Array<Proof>;
diff --git a/node_modules/@cashu/cashu-ts/src/model/types/index.ts b/node_modules/@cashu/cashu-ts/src/model/types/index.ts
index 95f7d4e..ed034ba 100644
--- a/node_modules/@cashu/cashu-ts/src/model/types/index.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/types/index.ts
@@ -93,6 +93,10 @@ export type ReceiveTokenEntryResponse = {
 	 * Proofs that could not be received. Doesn't throw an error, but if this field is populated it should be handled by the implementation accordingly
 	 */
 	proofsWithError: Array<Proof> | undefined;
+	/**
+	 * Error
+	 */
+	error?: string
 };
 
 /**
@@ -120,6 +124,10 @@ export type ReceiveResponse = {
 	 * TokenEntries that had errors. No error will be thrown, but clients can choose to handle tokens with errors accordingly.
 	 */
 	tokensWithErrors: Token | undefined;
+	/**
+	 * Errors
+	 */
+	errors?: string[]
 };
 
 /**
diff --git a/node_modules/@cashu/cashu-ts/src/utils.ts b/node_modules/@cashu/cashu-ts/src/utils.ts
index 1729b99..5614b37 100644
--- a/node_modules/@cashu/cashu-ts/src/utils.ts
+++ b/node_modules/@cashu/cashu-ts/src/utils.ts
@@ -1,6 +1,6 @@
-import { encodeBase64ToJson, encodeJsonToBase64 } from './base64.js';
-import { AmountPreference, Keys, Proof, Token, TokenEntry, TokenV2 } from './model/types/index.js';
-import { TOKEN_PREFIX, TOKEN_VERSION } from './utils/Constants.js';
+import { encodeBase64ToJson, encodeJsonToBase64 } from './base64';
+import { AmountPreference, Keys, Proof, Token, TokenEntry, TokenV2 } from './model/types/index';
+import { TOKEN_PREFIX, TOKEN_VERSION } from './utils/Constants';
 import { bytesToHex, hexToBytes } from '@noble/curves/abstract/utils';
 import { sha256 } from '@noble/hashes/sha256';
 
