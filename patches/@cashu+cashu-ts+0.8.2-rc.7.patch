diff --git a/node_modules/@cashu/cashu-ts/package.json b/node_modules/@cashu/cashu-ts/package.json
index af7649e..91a54c4 100644
--- a/node_modules/@cashu/cashu-ts/package.json
+++ b/node_modules/@cashu/cashu-ts/package.json
@@ -2,8 +2,7 @@
 	"name": "@cashu/cashu-ts",
 	"version": "0.8.2-rc.7",
 	"description": "cashu library for communicating with a cashu mint",
-	"main": "dist/lib/es5/index.js",
-	"module": "dist/lib/es6/index.js",
+	"main": "src/index.ts",	
 	"repository": {
 		"type": "git",
 		"url": "git+https://github.com/cashubtc/cashu-ts"
diff --git a/node_modules/@cashu/cashu-ts/src/CashuMint.ts b/node_modules/@cashu/cashu-ts/src/CashuMint.ts
index f6bc3b1..e260dcf 100644
--- a/node_modules/@cashu/cashu-ts/src/CashuMint.ts
+++ b/node_modules/@cashu/cashu-ts/src/CashuMint.ts
@@ -6,14 +6,14 @@ import {
 	MeltResponse,
 	MintKeys,
 	PostRestoreResponse,
-	RequestMintResponse,
+    RequestMintResponse,    
 	SerializedBlindedMessage,
 	SerializedBlindedSignature,
 	SplitPayload,
 	SplitResponse
-} from './model/types/index.js';
-import request from './request.js';
-import { isObj, joinUrls } from './utils.js';
+} from './model/types/index';
+import request from './request';
+import { isObj, joinUrls } from './utils';
 
 /**
  * Class represents Cashu Mint API. This class contains Lower level functions that are implemented by CashuWallet.
@@ -21,24 +21,33 @@ import { isObj, joinUrls } from './utils.js';
 class CashuMint {
 	/**
 	 * @param _mintUrl requires mint URL to create this object
+	 * @param _customRequest if passed, use custom request implementation for network communication with the mint
 	 */
-	constructor(private _mintUrl: string) {}
+	constructor(
+		private _mintUrl: string,
+		private _customRequest?: typeof request
+	) {}
 
 	get mintUrl() {
 		return this._mintUrl;
 	}
+
 	/**
 	 * fetches mints info at the /info endpoint
 	 * @param mintUrl
 	 */
-	public static async getInfo(mintUrl: string): Promise<GetInfoResponse> {
-		return request<GetInfoResponse>({ endpoint: joinUrls(mintUrl, 'info') });
+	public static async getInfo(
+		mintUrl: string,
+		customRequest?: typeof request
+	): Promise<GetInfoResponse> {
+		const requestInstance = customRequest || request;
+		return requestInstance<GetInfoResponse>({ endpoint: joinUrls(mintUrl, 'info') });
 	}
 	/**
 	 * fetches mints info at the /info endpoint
 	 */
 	async getInfo(): Promise<GetInfoResponse> {
-		return CashuMint.getInfo(this._mintUrl);
+		return CashuMint.getInfo(this._mintUrl, this._customRequest);
 	}
 	/**
 	 * Starts a minting process by requesting an invoice from the mint
@@ -46,8 +55,13 @@ class CashuMint {
 	 * @param amount Amount requesting for mint.
 	 * @returns the mint will create and return a Lightning invoice for the specified amount
 	 */
-	public static async requestMint(mintUrl: string, amount: number): Promise<RequestMintResponse> {
-		return request<RequestMintResponse>({
+	public static async requestMint(
+		mintUrl: string,
+		amount: number,
+		customRequest?: typeof request
+	): Promise<RequestMintResponse> {
+		const requestInstance = customRequest || request;
+		return requestInstance<RequestMintResponse>({
 			endpoint: `${joinUrls(mintUrl, 'mint')}?amount=${amount}`
 		});
 	}
@@ -58,7 +72,7 @@ class CashuMint {
 	 * @returns the mint will create and return a Lightning invoice for the specified amount
 	 */
 	async requestMint(amount: number): Promise<RequestMintResponse> {
-		return CashuMint.requestMint(this._mintUrl, amount);
+		return CashuMint.requestMint(this._mintUrl, amount, this._customRequest);
 	}
 	/**
 	 * Requests the mint to perform token minting after the LN invoice has been paid
@@ -70,9 +84,11 @@ class CashuMint {
 	public static async mint(
 		mintUrl: string,
 		payloads: { outputs: Array<SerializedBlindedMessage> },
-		hash: string
+		hash: string,
+		customRequest?: typeof request
 	) {
-		const data = await request<{ promises: Array<SerializedBlindedSignature> }>({
+		const requestInstance = customRequest || request;
+		const data = await requestInstance<{ promises: Array<SerializedBlindedSignature> }>({
 			endpoint: `${joinUrls(mintUrl, 'mint')}?hash=${hash}`,
 			method: 'POST',
 			requestBody: payloads
@@ -91,7 +107,7 @@ class CashuMint {
 	 * @returns serialized blinded signatures
 	 */
 	async mint(payloads: { outputs: Array<SerializedBlindedMessage> }, hash: string) {
-		return CashuMint.mint(this._mintUrl, payloads, hash);
+		return CashuMint.mint(this._mintUrl, payloads, hash, this._customRequest);
 	}
 	/**
 	 * Get the mints public keys
@@ -99,12 +115,17 @@ class CashuMint {
 	 * @param keysetId optional param to get the keys for a specific keyset. If not specified, the keys from the active keyset are fetched
 	 * @returns
 	 */
-	public static async getKeys(mintUrl: string, keysetId?: string): Promise<MintKeys> {
+	public static async getKeys(
+		mintUrl: string,
+		keysetId?: string,
+		customRequest?: typeof request
+	): Promise<MintKeys> {
 		if (keysetId) {
 			// make the keysetId url safe
 			keysetId = keysetId.replace(/\//g, '_').replace(/\+/g, '-');
 		}
-		return request<MintKeys>({
+		const requestInstance = customRequest || request;
+		return requestInstance<MintKeys>({
 			endpoint: keysetId ? joinUrls(mintUrl, 'keys', keysetId) : joinUrls(mintUrl, 'keys')
 		});
 	}
@@ -114,15 +135,19 @@ class CashuMint {
 	 * @returns the mints public keys
 	 */
 	async getKeys(keysetId?: string): Promise<MintKeys> {
-		return CashuMint.getKeys(this._mintUrl, keysetId);
+		return CashuMint.getKeys(this._mintUrl, keysetId, this._customRequest);
 	}
 	/**
 	 * Get the mints keysets in no specific order
 	 * @param mintUrl
 	 * @returns all the mints past and current keysets.
 	 */
-	public static async getKeySets(mintUrl: string): Promise<{ keysets: Array<string> }> {
-		return request<{ keysets: Array<string> }>({ endpoint: joinUrls(mintUrl, 'keysets') });
+	public static async getKeySets(
+		mintUrl: string,
+		customRequest?: typeof request
+	): Promise<{ keysets: Array<string> }> {
+		const requestInstance = customRequest || request;
+		return requestInstance<{ keysets: Array<string> }>({ endpoint: joinUrls(mintUrl, 'keysets') });
 	}
 
 	/**
@@ -130,7 +155,7 @@ class CashuMint {
 	 * @returns all the mints past and current keysets.
 	 */
 	async getKeySets(): Promise<{ keysets: Array<string> }> {
-		return CashuMint.getKeySets(this._mintUrl);
+		return CashuMint.getKeySets(this._mintUrl, this._customRequest);
 	}
 
 	/**
@@ -139,8 +164,13 @@ class CashuMint {
 	 * @param splitPayload data needed for performing a token split
 	 * @returns split tokens
 	 */
-	public static async split(mintUrl: string, splitPayload: SplitPayload): Promise<SplitResponse> {
-		const data = await request<SplitResponse>({
+	public static async split(
+		mintUrl: string,
+		splitPayload: SplitPayload,
+		customRequest?: typeof request
+	): Promise<SplitResponse> {
+		const requestInstance = customRequest || request;
+		const data = await requestInstance<SplitResponse>({
 			endpoint: joinUrls(mintUrl, 'split'),
 			method: 'POST',
 			requestBody: splitPayload
@@ -149,7 +179,6 @@ class CashuMint {
 		if (!isObj(data) || !Array.isArray(data?.promises)) {
 			throw new Error('bad response');
 		}        
-
 		return data;
 	}
 	/**
@@ -158,7 +187,7 @@ class CashuMint {
 	 * @returns split tokens
 	 */
 	async split(splitPayload: SplitPayload): Promise<SplitResponse> {
-		return CashuMint.split(this._mintUrl, splitPayload);
+		return CashuMint.split(this._mintUrl, splitPayload, this._customRequest);
 	}
 	/**
 	 * Ask mint to perform a melt operation. This pays a lightning invoice and destroys tokens matching its amount + fees
@@ -166,8 +195,13 @@ class CashuMint {
 	 * @param meltPayload
 	 * @returns
 	 */
-	public static async melt(mintUrl: string, meltPayload: MeltPayload): Promise<MeltResponse> {
-		const data = await request<MeltResponse>({
+	public static async melt(
+		mintUrl: string,
+		meltPayload: MeltPayload,
+		customRequest?: typeof request
+	): Promise<MeltResponse> {
+		const requestInstance = customRequest || request;
+		const data = await requestInstance<MeltResponse>({
 			endpoint: joinUrls(mintUrl, 'melt'),
 			method: 'POST',
 			requestBody: meltPayload
@@ -189,7 +223,7 @@ class CashuMint {
 	 * @returns
 	 */
 	async melt(meltPayload: MeltPayload): Promise<MeltResponse> {
-		return CashuMint.melt(this._mintUrl, meltPayload);
+		return CashuMint.melt(this._mintUrl, meltPayload, this._customRequest);
 	}
 	/**
 	 * Estimate fees for a given LN invoice
@@ -199,9 +233,11 @@ class CashuMint {
 	 */
 	public static async checkFees(
 		mintUrl: string,
-		checkfeesPayload: { pr: string }
+		checkfeesPayload: { pr: string },
+		customRequest?: typeof request
 	): Promise<{ fee: number }> {
-		const data = await request<{ fee: number }>({
+		const requestInstance = customRequest || request;
+		const data = await requestInstance<{ fee: number }>({
 			endpoint: joinUrls(mintUrl, 'checkfees'),
 			method: 'POST',
 			requestBody: checkfeesPayload
@@ -220,7 +256,7 @@ class CashuMint {
 	 * @returns estimated Fee
 	 */
 	async checkFees(checkfeesPayload: { pr: string }): Promise<{ fee: number }> {
-		return CashuMint.checkFees(this._mintUrl, checkfeesPayload);
+		return CashuMint.checkFees(this._mintUrl, checkfeesPayload, this._customRequest);
 	}
 	/**
 	 * Checks if specific proofs have already been redeemed
@@ -230,9 +266,11 @@ class CashuMint {
 	 */
 	public static async check(
 		mintUrl: string,
-		checkPayload: CheckSpendablePayload
+		checkPayload: CheckSpendablePayload,
+		customRequest?: typeof request
 	): Promise<CheckSpendableResponse> {
-		const data = await request<CheckSpendableResponse>({
+		const requestInstance = customRequest || request;
+		const data = await requestInstance<CheckSpendableResponse>({
 			endpoint: joinUrls(mintUrl, 'check'),
 			method: 'POST',
 			requestBody: checkPayload
@@ -250,14 +288,16 @@ class CashuMint {
 	 * @returns redeemed and unredeemed ordered list of booleans
 	 */
 	async check(checkPayload: CheckSpendablePayload): Promise<CheckSpendableResponse> {
-		return CashuMint.check(this._mintUrl, checkPayload);
+		return CashuMint.check(this._mintUrl, checkPayload, this._customRequest);
 	}
 
 	public static async restore(
 		mintUrl: string,
-		restorePayload: { outputs: Array<SerializedBlindedMessage> }
+		restorePayload: { outputs: Array<SerializedBlindedMessage> },
+        customRequest?: typeof request
 	): Promise<PostRestoreResponse> {
-		const data = await request<PostRestoreResponse>({
+        const requestInstance = customRequest || request;
+		const data = await requestInstance<PostRestoreResponse>({
 			endpoint: joinUrls(mintUrl, 'restore'),
 			method: 'POST',
 			requestBody: restorePayload
diff --git a/node_modules/@cashu/cashu-ts/src/CashuWallet.ts b/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
index b7cf354..38dd081 100644
--- a/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
+++ b/node_modules/@cashu/cashu-ts/src/CashuWallet.ts
@@ -1,7 +1,7 @@
 import { randomBytes } from '@noble/hashes/utils';
-import { CashuMint } from './CashuMint.js';
-import * as dhke from './DHKE.js';
-import { BlindedMessage } from './model/BlindedMessage.js';
+import { CashuMint } from './CashuMint';
+import * as dhke from './DHKE';
+import { BlindedMessage } from './model/BlindedMessage';
 import {
 	AmountPreference,
 	BlindedMessageData,
@@ -17,7 +17,7 @@ import {
 	SerializedBlindedSignature,
 	SplitPayload,
 	TokenEntry
-} from './model/types/index.js';
+} from './model/types/index';
 import {
 	bytesToNumber,
 	cleanToken,
@@ -25,8 +25,10 @@ import {
 	getDecodedToken,
 	getDefaultAmountPreference,
 	splitAmount
-} from './utils.js';
-import { deriveBlindingFactor, deriveSecret, deriveSeedFromMnemonic } from './secrets.js';
+} from './utils';
+import { deriveBlindingFactor, deriveSecret, deriveSeedFromMnemonic } from './secrets';
+import { validateMnemonic } from '@scure/bip39';
+import { wordlist } from '@scure/bip39/wordlists/english.js';
 
 /**
  * Class that represents a Cashu wallet.
@@ -43,15 +45,23 @@ class CashuWallet {
 	 * @param mint Cashu mint instance is used to make api calls
 	 * @param mnemonic mnemonic seed phrase to initial derivation key for this wallets deterministic secrets
 	 */
-	constructor(mint: CashuMint, keys?: MintKeys, mnemonic?: string) {
+	constructor(mint: CashuMint, keys?: MintKeys, mnemonicOrSeed?: string | Uint8Array) {
 		this._keys = keys || {};
 		this.mint = mint;
 		if (keys) {
 			this._keysetId = deriveKeysetId(this._keys);
 		}
-		if (mnemonic) {
-			this._seed = deriveSeedFromMnemonic(mnemonic);
+        if (!mnemonicOrSeed) {
+			return
 		}
+		if (mnemonicOrSeed instanceof Uint8Array) {
+			this._seed = mnemonicOrSeed
+			return
+		}
+		if (!validateMnemonic(mnemonicOrSeed, wordlist)) {
+			throw new Error('Tried to instantiate with mnemonic, but mnemonic was invalid');
+		}
+		this._seed = deriveSeedFromMnemonic(mnemonicOrSeed);
 	}
 
 	get keys(): MintKeys {
@@ -69,13 +79,16 @@ class CashuWallet {
 	 * @param proofs (only the 'secret' field is required)
 	 * @returns
 	 */
-	async checkProofsSpent<T extends { secret: string }>(proofs: Array<T>): Promise<Array<T>> {
+	async checkProofsSpent<T extends { secret: string }>(proofs: Array<T>): Promise<{spent: Array<T>, pending: Array<T>}> {
 		const payload = {
 			//send only the secret
 			proofs: proofs.map((p) => ({ secret: p.secret }))
 		};
-		const { spendable } = await this.mint.check(payload);
-		return proofs.filter((_, i) => !spendable[i]);
+		const { spendable, pending: isPending } = await this.mint.check(payload);
+        
+        const spent = proofs.filter((_, i) => !spendable[i]);
+        const pending = isPending && Array.isArray(isPending) ? proofs.filter((_, i) => isPending[i]) : [];
+		return {spent, pending}
 	}
 	/**
 	 * Starts a minting process by requesting an invoice from the mint
@@ -166,6 +179,7 @@ class CashuWallet {
 		const { token } = cleanToken(getDecodedToken(encodedToken));
 		const tokenEntries: Array<TokenEntry> = [];
 		const tokenEntriesWithError: Array<TokenEntry> = [];
+        let errors: Error[] = []
 		let newKeys: MintKeys | undefined;
 		for (const tokenEntry of token) {
 			if (!tokenEntry?.proofs?.length) {
@@ -175,8 +189,12 @@ class CashuWallet {
 				const {
 					proofsWithError,
 					proofs,
-					newKeys: newKeysFromReceive
+					newKeys: newKeysFromReceive,
+                    error
 				} = await this.receiveTokenEntry(tokenEntry, preference, count);
+
+                if(error) {errors.push(error)}
+                
 				if (proofsWithError?.length) {                    
 					tokenEntriesWithError.push(tokenEntry);                    
 					continue;
@@ -185,15 +203,16 @@ class CashuWallet {
 				if (!newKeys) {
 					newKeys = newKeysFromReceive;
 				}
-			} catch (error) {
-				console.error(error);
+			} catch (e: any) {                
+				errors.push(e)
 				tokenEntriesWithError.push(tokenEntry);
 			}
 		}
 		return {
 			token: { token: tokenEntries },
 			tokensWithErrors: tokenEntriesWithError.length ? { token: tokenEntriesWithError } : undefined,
-			newKeys
+			newKeys,
+            errors: errors.length ? errors : undefined
 		};
 	}
 
@@ -212,6 +231,7 @@ class CashuWallet {
 		const proofsWithError: Array<Proof> = [];
 		const proofs: Array<Proof> = [];
 		let newKeys: MintKeys | undefined;
+        let err: Error | undefined = undefined
 		try {
 			const amount = tokenEntry.proofs.reduce((total, curr) => total + curr.amount, 0);
 			if (!preference) {
@@ -224,6 +244,7 @@ class CashuWallet {
 				count
 			);
 			const { promises, error } = await CashuMint.split(tokenEntry.mint, payload);
+            if(error) {err = {name: 'Error', message: error}}
 			const newProofs = dhke.constructProofs(
 				promises,
 				blindedMessages.rs,
@@ -235,14 +256,15 @@ class CashuWallet {
 				tokenEntry.mint === this.mint.mintUrl
 					? await this.changedKeys([...(promises || [])])
 					: undefined;
-		} catch (error) {
-			console.error(error);
+		} catch (e: any) {
+			err = e
 			proofsWithError.push(...tokenEntry.proofs);
 		}
 		return {
 			proofs,
 			proofsWithError: proofsWithError.length ? proofsWithError : undefined,
-			newKeys
+			newKeys,
+            error: err
 		};
 	}
 
@@ -512,8 +534,8 @@ class CashuWallet {
 		const secrets: Array<Uint8Array> = [];
 		const rs: Array<bigint> = [];
 		for (let i = 0; i < amounts.length; i++) {
-			let deterministicR = undefined;
-			let secret = undefined;
+			let deterministicR: bigint | undefined = undefined;
+			let secret: Uint8Array | undefined = undefined;
 			if (this._seed && count != undefined) {
 				secret = deriveSecret(this._seed, keysetId??this.keysetId, count + i);
 				deterministicR = bytesToNumber(deriveBlindingFactor(this._seed, keysetId??this.keysetId, count + i));
diff --git a/node_modules/@cashu/cashu-ts/src/DHKE.ts b/node_modules/@cashu/cashu-ts/src/DHKE.ts
index ca37559..02843b5 100644
--- a/node_modules/@cashu/cashu-ts/src/DHKE.ts
+++ b/node_modules/@cashu/cashu-ts/src/DHKE.ts
@@ -1,8 +1,8 @@
 import { ProjPointType } from '@noble/curves/abstract/weierstrass';
 import { secp256k1 } from '@noble/curves/secp256k1';
-import { encodeUint8toBase64 } from './base64.js';
-import { MintKeys, Proof, SerializedBlindedSignature } from './model/types/index.js';
-import { bytesToNumber } from './utils.js';
+import { encodeUint8toBase64 } from './base64';
+import { MintKeys, Proof, SerializedBlindedSignature } from './model/types/index';
+import { bytesToNumber } from './utils';
 import { sha256 } from '@noble/hashes/sha256';
 import { bytesToHex } from '@noble/curves/abstract/utils';
 
diff --git a/node_modules/@cashu/cashu-ts/src/index.ts b/node_modules/@cashu/cashu-ts/src/index.ts
index b1f2c00..0c0f85c 100644
--- a/node_modules/@cashu/cashu-ts/src/index.ts
+++ b/node_modules/@cashu/cashu-ts/src/index.ts
@@ -1,10 +1,10 @@
-import { CashuMint } from './CashuMint.js';
-import { CashuWallet } from './CashuWallet.js';
-import { setGlobalRequestOptions } from './request.js';
-import { getEncodedToken, getDecodedToken, deriveKeysetId } from './utils.js';
+import { CashuMint } from './CashuMint';
+import { CashuWallet } from './CashuWallet';
+import { setGlobalRequestOptions } from './request';
+import { getEncodedToken, getDecodedToken, deriveKeysetId } from './utils';
 import { decode as getDecodedLnInvoice } from '@gandlaf21/bolt11-decode';
-import { generateNewMnemonic } from './secrets.js';
-export * from './model/types/index.js';
+import { generateNewMnemonic, deriveSeedFromMnemonic } from './secrets';
+export * from './model/types/index';
 
 export {
 	CashuMint,
@@ -14,5 +14,6 @@ export {
 	deriveKeysetId,
 	getDecodedLnInvoice,
 	setGlobalRequestOptions,
-	generateNewMnemonic
+	generateNewMnemonic,
+	deriveSeedFromMnemonic
 };
diff --git a/node_modules/@cashu/cashu-ts/src/model/types/index.ts b/node_modules/@cashu/cashu-ts/src/model/types/index.ts
index 4855c33..91e45bb 100644
--- a/node_modules/@cashu/cashu-ts/src/model/types/index.ts
+++ b/node_modules/@cashu/cashu-ts/src/model/types/index.ts
@@ -41,6 +41,8 @@ export type ReceiveTokenEntryResponse = {
 	 * If the mint has rotated keys, this field will be populated with the new keys.
 	 */
 	newKeys?: MintKeys;
+
+    error?: Error
 };
 
 /**
@@ -76,6 +78,8 @@ export type ReceiveResponse = {
 	 * If the mint has rotated keys, this field will be populated with the new keys.
 	 */
 	newKeys?: MintKeys;
+
+    errors?: Error[] | undefined;
 };
 
 /**
@@ -215,6 +219,7 @@ export type CheckSpendableResponse = {
 	 * Ordered list for checked proofs. True if the secret has not been redeemed at the mint before
 	 */
 	spendable: Array<boolean>;
+    pending?: Array<boolean>;
 } & ApiError;
 /**
  * blinded message for sending to the mint
diff --git a/node_modules/@cashu/cashu-ts/src/secrets.ts b/node_modules/@cashu/cashu-ts/src/secrets.ts
index ce70d91..4ebe676 100644
--- a/node_modules/@cashu/cashu-ts/src/secrets.ts
+++ b/node_modules/@cashu/cashu-ts/src/secrets.ts
@@ -4,6 +4,7 @@ import { wordlist } from '@scure/bip39/wordlists/english';
 import { encodeBase64toUint8 } from './base64';
 import { bytesToNumber } from './utils';
 import { hexToNumber } from '@noble/curves/abstract/utils';
+
 export const generateNewMnemonic = (): string => {
 	const mnemonic = generateMnemonic(wordlist, 128);
 	if (!validateMnemonic(mnemonic, wordlist)) {
diff --git a/node_modules/@cashu/cashu-ts/src/utils.ts b/node_modules/@cashu/cashu-ts/src/utils.ts
index 541a94f..ba835d1 100644
--- a/node_modules/@cashu/cashu-ts/src/utils.ts
+++ b/node_modules/@cashu/cashu-ts/src/utils.ts
@@ -1,4 +1,4 @@
-import { encodeBase64ToJson, encodeJsonToBase64 } from './base64.js';
+import { encodeBase64ToJson, encodeJsonToBase64 } from './base64';
 import {
 	AmountPreference,
 	MintKeys,
@@ -7,7 +7,7 @@ import {
 	TokenEntry,
 	TokenV2
 } from './model/types/index.js';
-import { TOKEN_PREFIX, TOKEN_VERSION } from './utils/Constants.js';
+import { TOKEN_PREFIX, TOKEN_VERSION } from './utils/Constants';
 import { bytesToHex } from '@noble/curves/abstract/utils';
 import { sha256 } from '@noble/hashes/sha256';
 import { Buffer } from 'buffer/';
